@using DrinkingNerf_Engine.Users;
@using Microsoft.AspNetCore.Mvc;
@inject UserService userService

<div class="user-list">
    <h2>User List</h2>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Score</th>
                <th></th> <!-- Column for delete icon -->
            </tr>
        </thead>
        <tbody>
            @foreach (var user in Users)
            {
                <tr>
                    <td>@user.Name</td>
                    <td>
                        @if (user.UserId.Id == editingUser?.UserId.Id)
                        {
                            <input type="text" @bind="editingUser.Score" />
                        }
                        else
                        {
                            @user.Score
                        }
                    </td>
                    <td>
                        @if (user.UserId.Id == editingUser?.UserId.Id)
                        {
                            <button class="btn btn-success btn-sm" @onclick="() => SaveUser(user)">
                                Save
                            </button>
                            <button class="btn btn-secondary btn-sm" @onclick="() => CancelEdit()">
                                Cancel
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteUser(user)">
                                Delete
                            </button>
                            <button class="btn btn-primary btn-sm" @onclick="() => EditUser(user)">
                                Edit
                            </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code
{
    public IEnumerable<User> Users;
    private User editingUser = null;

    private int newScore;

    protected override async Task OnInitializedAsync()
    {
        Users = userService.GetUsers();
    }

    public void DeleteUser(User user)
    {
        userService.DeleteUser(user);
    }

    public void Refresh()
    {
        StateHasChanged();
    }

    private async Task EditUser(User user)
    {
        editingUser = user;
        Refresh();
    }

    private async Task SaveUser(User user)
    {
        user.Score = editingUser.Score;
        userService.UpdateUser(user);
        editingUser = null;
        Refresh();
    }

    private async Task CancelEdit()
    {
        editingUser = null;
        Refresh();
    }
}