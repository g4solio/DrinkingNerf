@page "/{Username}"
@using System.Globalization;
@using DrinkingNerf_Engine.Bangs;
@using DrinkingNerf_Engine.Challenges;
@using DrinkingNerf_Engine.Users;
@inject UserService userService;
@inject IJSRuntime JsRuntime;
@inject PointSystemService pointSystem;
@inject ChallengeService challengeService;
@inject BangService bangService;

<PageTitle>DrinkingNerf - @Username</PageTitle>

<div class="row border">
    <div class="col">
        <h2 class="text-center my-2">@Username</h2>
    </div>
</div>

<div class="row border">
    <div class="col">
        <div class="d-flex flex-column">
            <h3 class="text-center">Munizioni</h3>
            <div class="d-flex justify-content-between">
                @for (int i = 0; i < RemainingBangs; i++)
                {
                    <img src="bullet.png" alt="Ammo" />
                }
            </div>
        </div>
    </div>
</div>


@if (SelectedUser == null && RemainingBangs > 0)
{
    <div class="row border">
        <div class="col">
            <div class="d-flex flex-column m-2 border rounded">
                <h3 class="text-center">Nemici</h3>
                <div class="d-flex flex-wrap justify-content-between">
                    @foreach (var user in Users)
                    {
                        <button class="btn btn-primary" @onclick="() => SelectUser(user)">@user.Name</button>
                    }
                </div>
            </div>
        </div>
    </div>
}

@if (SelectedUser != null && RemainingBangs > 0)
{
    <div class="row border">
        <div class="col">
            <div class="d-flex flex-column m-2 border rounded">
                <h4>Cosa hai fatto a @SelectedUser.Name?</h4>
                <div class="d-flex justify-content-between">
                    <button class="btn btn-success" @onclick="() => Bang(true)">Colpito</button>
                    <button class="btn btn-danger" @onclick="() => Bang(false)">Mancato</button>
                </div>
            </div>
        </div>
    </div>
}

<div class="challenge-list">
    <div class="row border">
        <div class="col-md-6">
            <div class="d-flex flex-column">
                <h3 class="text-center">Eventi</h3>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Nome</th>
                            <th>Pistolero</th>
                            <th>Bersaglio</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var eventChallenge in Challenges.Where(c => c is Event))
                        {
                            <tr>
                                <td>@eventChallenge.Name()</td>
                                <td>@userService.GetUser(eventChallenge.Shooter())?.Name</td>
                                <td>@userService.GetUser(eventChallenge.Target())?.Name</td>
                                <!-- ... Other columns ... -->
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="col-md-6">
            <div class="d-flex flex-column">
                <h3 class="text-center">Task</h3>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Nome</th>
                            <th>Bersaglio</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var taskChallenge in Challenges.Where(c => c is DrinkingNerf_Engine.Challenges.Task))
                        {
                            <tr>
                                <td>@taskChallenge.Name()</td>
                                <td>@userService.GetUser(taskChallenge.Target())?.Name</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<div class="bang-list">

    <div class="row border">
        <div class="col-md-6">
            <h3>Colpi Sparati</h3>
            <table class="table">
                <thead>
                    <tr>
                        <th>Bersaglio</th>
                        <th>Hit/Miss</th>
                        <th>Sorsi da bere</th>
                        <th>Tempo</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var bang in bangService.GetBangsFromShooterId(UserId))
                    {
                        <tr>
                            <td>@userService.GetUser(bang.Target)?.Name</td>
                            <td>
                                @if (@bang.Outcome == global::Bang.OutcomeEnum.Hit)
                                {
                                    <div>✅</div>
                                }
                                else
                                {
                                    <div>❌</div>
                                }
                            </td>
                            <td>@bang.ShooterHitScoreModificator</td>
                            <td>@bang.DateTime.ToString("dd MMMM, h:mm tt", CultureInfo.InvariantCulture)</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="col-md-6">
            <h3>Colpi Ricevuti</h3>
            <table class="table">
                <thead>
                    <tr>
                        <th>Pistolero</th>
                        <th>Quando</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var bang in bangService.GetBangsFromTargetId(UserId))
                    {
                        <tr>
                            <td>@userService.GetUser(bang.Shooter)?.Name</td>
                            <td>@bang.DateTime.ToString("dd MMMM, h:mm tt", CultureInfo.InvariantCulture)</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>


@code
{
    [Parameter]
    public string Username { get; set; }

    protected UserId UserId { get; set; }

    public int RemainingBangs { get; set; }

    public IEnumerable<User> Users { get; set; }

    public User SelectedUser { get; set; }

    public IEnumerable<IChallenge> Challenges { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        UserId = userService.GetUserIdByName(Username);
        Users = userService.GetUsers().Where(u => u.UserId.Id != UserId.Id);
        RemainingBangs = userService.GetUser(UserId).Ammunitions;
        Challenges = challengeService.GetChallengesVisibleByUser(UserId);
    }

    public void SelectUser(User target)
    {
        SelectedUser = target;
    }

    public void Bang(bool isHitted)
    {
        pointSystem.RegisterBang(new global::Bang()
            {
                From = UserId,
                To = SelectedUser.UserId,
                TimeOfBang = DateTime.Now,
                Outcome = isHitted ? global::Bang.OutcomeEnum.Hit : global::Bang.OutcomeEnum.Missed
            });

        PerformActionAlert($"{(isHitted ? "Hit" : "Miss")} has been registered to {SelectedUser.Name}");
        RemainingBangs = userService.GetUser(UserId).Ammunitions;
    }

    private async System.Threading.Tasks.Task PerformActionAlert(string message)
    {
        await JsRuntime.InvokeVoidAsync("alert", $"{message}");
    }

}