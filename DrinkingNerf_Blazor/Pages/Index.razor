@page "/{Username}"
@using DrinkingNerf_Engine.Bangs;
@using DrinkingNerf_Engine.Challenges;
@using DrinkingNerf_Engine.Users;
@inject UserService userService;
@inject IJSRuntime JsRuntime;
@inject PointSystemService pointSystem;
@inject ChallengeService challengeService;
@inject BangService bangService;

<PageTitle>@UserId.Id</PageTitle>

<h3><p>Hi @Username</p></h3>

<p>
    Ammunitions:
    <br />
    @for(int i = 0; i < RemainingBangs; i++)
    {
        <img src="bullet.png" alt="Ammo" />
    }
</p>

@if (SelectedUser == null && RemainingBangs > 0)
{
    <h3>Select a User:</h3>
    @foreach (var user in Users)
    {
        <button class="btn btn-primary" @onclick="() => SelectUser(user)">@user.Name</button>
    }
}

@if (SelectedUser != null && RemainingBangs > 0)
{
    <div>
        <h4>Actions for @SelectedUser.Name:</h4>
        <button class="btn btn-success" @onclick="() => Bang(true)">Hitted</button>
        <button class="btn btn-danger" @onclick="() => Bang(false)">Missed</button>
    </div>
}

<div class="challenge-list">

    <div class="row">
        <div class="col-md-6">
            <h2>Event List</h2>
            <table class="table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Shooter</th>
                        <th>Target</th>
                        <!-- ... Other columns ... -->
                    </tr>
                </thead>
                <tbody>
                    @foreach (var eventChallenge in Challenges.Where(c => c is Event))
                    {
                        <tr>
                            <td>@eventChallenge.Name()</td>
                            <td>@userService.GetUser(eventChallenge.Shooter())?.Name</td>
                            <td>@userService.GetUser(eventChallenge.Target())?.Name</td>
                            <!-- ... Other columns ... -->
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="col-md-6">
            <h2>Task List</h2>
            <table class="table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Target</th>
                        <!-- ... Other columns ... -->
                    </tr>
                </thead>
                <tbody>
                    @foreach (var taskChallenge in Challenges.Where(c => c is DrinkingNerf_Engine.Challenges.Task))
                    {
                        <tr>
                            <td>@taskChallenge.Name()</td>
                            <td>@userService.GetUser(taskChallenge.Target())?.Name</td>
                            <!-- ... Other columns ... -->
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>


<div class="bang-list">

    <div class="row">
        <div class="col-md-6">
            <h2>Shot List</h2>
            <table class="table">
                <thead>
                    <tr>
                        <th>Target</th>
                        <th>Hit/Miss</th>
                        <th>Reward</th>
                        <th>Time</th>
                        <!-- ... Other columns ... -->
                    </tr>
                </thead>
                <tbody>
                    @foreach (var bang in bangService.GetBangsFromShooterId(UserId))
                    {
                        <tr>
                            <td>@userService.GetUser(bang.Target)?.Name</td>
                            <td>
                                @if(@bang.Outcome == global::Bang.OutcomeEnum.Hit)
                                {
                                    <div>✅</div>
                                }else
                                {
                                    <div>❌</div>
                                }
                            </td>
                            <td> + @bang.ShooterHitScoreModificator </td>
                            <td>@bang.DateTime</td>
                            <!-- ... Other columns ... -->
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="col-md-6">
            <h2>Hit Received List</h2>
            <table class="table">
                <thead>
                    <tr>
                        <th>Shooter</th>
                        <th>Time</th>
                        <!-- ... Other columns ... -->
                    </tr>
                </thead>
                <tbody>
                    @foreach (var bang in bangService.GetBangsFromTargetId(UserId))
                    {
                        <tr>
                            <td>@userService.GetUser(bang.Shooter)?.Name</td>
                            <td>@bang.DateTime</td>
                            <!-- ... Other columns ... -->
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>


@code
{
    [Parameter]
    public string Username { get; set; }

    protected UserId UserId { get; set; }

    public int RemainingBangs { get; set; }

    public IEnumerable<User> Users { get; set; }

    public User SelectedUser { get; set; }

    public IEnumerable<IChallenge> Challenges { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        UserId = userService.GetUserIdByName(Username);
        Users = userService.GetUsers().Where(u => u.UserId.Id != UserId.Id);
        RemainingBangs = userService.GetUser(UserId).Ammunitions;
        Challenges = challengeService.GetChallengesVisibleByUser(UserId);
    }

    public void SelectUser(User target)
    {
        SelectedUser = target;
    }

    public void Bang(bool isHitted)
    {
        pointSystem.RegisterBang(new global::Bang()
        {
            From = UserId,
            To = SelectedUser.UserId,
            TimeOfBang = DateTime.Now,
            Outcome = isHitted ? global::Bang.OutcomeEnum.Hit : global::Bang.OutcomeEnum.Missed
        });

        PerformActionAlert($"{(isHitted ? "Hit" : "Miss")} has been registered to {SelectedUser.Name}");
        RemainingBangs = userService.GetUser(UserId).Ammunitions;
    }

    private async System.Threading.Tasks.Task PerformActionAlert(string message)
    {
        await JsRuntime.InvokeVoidAsync("alert", $"{message}");
    }

}